-- LocalScript em StarterGui

-- Criar ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "RebirthGui"
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Criar Frame (janela)
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 240, 0, 150)
frame.Position = UDim2.new(0.35, 0, 0.3, 0)
frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true
frame.Parent = screenGui

-- Título
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
title.BorderSizePixel = 0
title.Text = "Painel de Rebirth"
title.TextColor3 = Color3.new(1,1,1)
title.Font = Enum.Font.SourceSansBold
title.TextSize = 18
title.Parent = frame

-- Caixa de texto para digitar o valor
local textBox = Instance.new("TextBox")
textBox.Size = UDim2.new(0.8, 0, 0.25, 0)
textBox.Position = UDim2.new(0.1, 0, 0.4, 0)
textBox.PlaceholderText = "Digite o valor..."
textBox.Text = ""
textBox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
textBox.TextColor3 = Color3.new(1,1,1)
textBox.Font = Enum.Font.SourceSans
textBox.TextSize = 16
textBox.ClearTextOnFocus = false
textBox.Parent = frame

-- Botão
local button = Instance.new("TextButton")
button.Size = UDim2.new(0.8, 0, 0.25, 0)
button.Position = UDim2.new(0.1, 0, 0.7, 0)
button.Text = "Aplicar Rebirth"
button.BackgroundColor3 = Color3.fromRGB(70, 130, 180)
button.TextColor3 = Color3.new(1,1,1)
button.Font = Enum.Font.SourceSansBold
button.TextSize = 16
button.Parent = frame

-- Clique do botão
button.MouseButton1Click:Connect(function()
	local player = game.Players.LocalPlayer
	local stats = player:FindFirstChild("leaderstats")

	if stats and stats:FindFirstChild("Rebirth") then
		local num = tonumber(textBox.Text)
		if num then
			stats.Rebirth.Value = num
		else
			warn("Digite um número válido!")
		end
	end
end)-- ══════════════════════════════════════

local function Listen(Name, Element)
	if Element:GetAttribute("IntBox") then
		table.insert(Connections, Element:GetPropertyChangedSignal("Text"):Connect(function()
			Element.Text = string.gsub(Element.Text, "[^%d]", "")
		end))
	end

	table.insert(Connections, Element.FocusLost:Connect(function()
		local CurrentText = Element.Text
		if not CurrentText or string.match(CurrentText, "^%s*$") then return end
		Settings.Config[Name] = Element.Text
	end))

end

local function EndThread(Success)
	if Threading then
		if not FinishedThread then
			task.cancel(Threading)
		end

		Threading = nil
		FinishedThread = false
		Settings["Started"] = false

		Notification:Notify(Success and 6 or 12, nil, nil, nil)

	end

end

local function DoJJ(Name: string, Number: number, Prefix: string)
	local Success: boolean, String: string? = Extenso:Convert(Number)
	local Prefix = Prefix and Prefix or ""

	local Method: (String: string, Prefix: string) -> ()? = Methods[Name]

	if not Method then
		Notification:Notify(12, nil, nil, nil)
	end

	if Success then
		Method(String, Prefix)
	end

end

local function StartThread()
	local Config = Settings.Config;

	if not Config["Start"] or not Config["End"] then return end
	if Threading then EndThread(false) return end

	local Method =
		table.find(Options.Experiments, "hell_jacks_2024_02-dev") and "HJ" or
		table.find(Options.Experiments, "lowercase_jjs_2024_12") and "Lowercase" or
		"Normal"

	Notification:Notify(5, nil, nil, nil)
	Threading = task.spawn(function()
		for Amount = Config.Start, Config.End do
			DoJJ(Method, Amount, Config["Prefix"])

			if Amount ~= tonumber(Config.End) then    
				task.wait(Options.Tempo)    
			end    
		end    
		
		FinishedThread = true    
		EndThread(true)

	end)

end

local function GetLanguage(Lang: string)
	local Success, Result = pcall(function()
		return require(string.format("I18N/%s", Lang))
	end)

	if Success then
		return Result
	end

	return {}

end

local function MigrateSettings()
	local Lang = Options["Language"];
	local Experiments = Options["Experiments"];

	if not Experiments then
		Options["Experiments"] = {};
	end

	if typeof(Lang) == "string" then
		Options["Language"] = { UI = Lang, Words = Lang };
	end

end

MigrateSettings()

-- ══════════════════════════════════════
--                Main				
-- ══════════════════════════════════════
local UILang, WordsLang = GetLanguage(Options.Language.UI), GetLanguage(Options.Language.Words)

UI:SetVersion(Version)
UI:SetLanguage(UILang.UI)
UI:SetRainbow(Options.Rainbow)
UI:SetParent(Parent)

Notification:SetParent(UI.getUI())
Notification:SetLang(UILang.Notification)
Extenso:SetLang(WordsLang)

for Name, Element in pairs(UIElements["Box"]) do
	task.spawn(Listen, Name, Element)
end

table.insert(Connections, UIElements["Circle"].MouseButton1Click:Connect(function()
	if Toggled then
		Settings["Jump"] = false
		Toggled = false
		TweenService:Create(UIElements["Circle"], TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = UDim2.new(0.22, 0, 0.5, 0) }):Play()
		TweenService:Create(UIElements["Slide"], TweenInfo.new(0.3), { BackgroundColor3 = Color3.fromRGB(20, 20, 20) }):Play()
	else
		Settings["Jump"] = true
		Toggled = true
		TweenService:Create(UIElements["Circle"], TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = UDim2.new(0.772, 0, 0.5, 0) }):Play()
		TweenService:Create(UIElements["Slide"], TweenInfo.new(0.3), { BackgroundColor3 = Color3.fromRGB(37, 150, 255) }):Play()
	end
end))

table.insert(Connections, UIElements["Play"].MouseButton1Up:Connect(function()
	if not Settings.Config["Start"] or not Settings.Config["End"] then return end
	if not Settings["Started"] then
		Settings["Started"] = true
		StartThread()
	else
		Settings["Started"] = false
		EndThread(false)
	end
end))

if Notification then
	Notification:SetupJJs()
end

Request:Post("https://scripts-zvyz.glitch.me/api/count")

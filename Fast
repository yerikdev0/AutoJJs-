local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

local UIElements = {
	Box = {},
}

local Window = Rayfield:CreateWindow({
	Name = "AutoJJ",
	LoadingTitle = "AutoJJ Loader",
	LoadingSubtitle = "by Erik",
	ConfigurationSaving = {
		Enabled = false
	},
	Discord = {
		Enabled = false,
	},
	KeySystem = false,
})

local Tab = Window:CreateTab("Configurar", 4483362458)

-- Input: Começar do
UIElements.Box["Start"] = Tab:CreateInput({
	Name = "Começar do:",
	PlaceholderText = "Ex: 0",
	RemoveTextAfterFocusLost = false,
	Numeric = true,
	Callback = function(Value)
		-- Salva no script principal via Settings.Config["Start"]
	end,
})

-- Input: Até o
UIElements.Box["End"] = Tab:CreateInput({
	Name = "Até o:",
	PlaceholderText = "Ex: 20",
	RemoveTextAfterFocusLost = false,
	Numeric = true,
	Callback = function(Value)
		-- Salva no script principal via Settings.Config["End"]
	end,
})

-- Input: Final do Prefix
UIElements.Box["Prefix"] = Tab:CreateInput({
	Name = "Final do Prefix:",
	PlaceholderText = "Ex: !",
	RemoveTextAfterFocusLost = false,
	Callback = function(Value)
		-- Salva no script principal via Settings.Config["Prefix"]
	end,
})

-- Input: Tempo entre mensagens (delay)
UIElements.Box["Delay"] = Tab:CreateInput({
	Name = "Tempo entre mensagens (s):",
	PlaceholderText = "Ex: 2.5",
	RemoveTextAfterFocusLost = false,
	Numeric = true,
	Callback = function(Value)
		getgenv().TempDelay = tonumber(Value)
	end,
})

-- Botão: Aplicar Tempo
UIElements.Box["ApplyDelay"] = Tab:CreateButton({
	Name = "Aplicar Tempo",
	Callback = function()
		local delay = tonumber(getgenv().TempDelay)
		if delay then
			getgenv().Options = getgenv().Options or {}
			getgenv().Options.Tempo = delay
			Rayfield:Notify({
				Title = "Tempo Atualizado",
				Content = "Novo tempo: " .. tostring(delay) .. " segundos",
				Duration = 3,
			})
		else
			Rayfield:Notify({
				Title = "Erro",
				Content = "Digite um valor válido no campo de tempo.",
				Duration = 3,
			})
		end
	end,
})

-- Retorna os elementos criados
return {
	UIElements = UIElements,
	SetVersion = function(Version) end,
	SetLanguage = function() end,
	SetRainbow = function() end,
	SetParent = function() end,
	getUI = function()
		return game:GetService("CoreGui")
	end,
}local function GetLanguage(Lang)
	local Success, Result = pcall(function()
		return require(string.format("I18N/%s", Lang))
	end)
	return Success and Result or {}
end

local function MigrateSettings()
	local Lang = Options.Language
	local Experiments = Options.Experiments
	if not Experiments then Options.Experiments = {} end
	if typeof(Lang) == "string" then
		Options.Language = { UI = Lang, Words = Lang }
	end
end

MigrateSettings()

-- ══════════════════════════════════════
--                Main				
-- ══════════════════════════════════════
local UILang, WordsLang = GetLanguage(Options.Language.UI), GetLanguage(Options.Language.Words)

UI:SetVersion(Version)
UI:SetLanguage(UILang.UI)
UI:SetRainbow(Options.Rainbow)
UI:SetParent(Parent)

Notification:SetParent(UI.getUI())
Notification:SetLang(UILang.Notification)
Extenso:SetLang(WordsLang)

-- ADICIONA A BOX PARA DELAY
if not UIElements["Box"]["Delay"] then
	UIElements["Box"]["Delay"] = Instance.new("TextBox")
	UIElements["Box"]["Delay"].Name = "Delay"
	UIElements["Box"]["Delay"].PlaceholderText = "Tempo (seg)"
	UIElements["Box"]["Delay"].Size = UDim2.new(0, 100, 0, 30)
	UIElements["Box"]["Delay"].Position = UDim2.new(0, 10, 0, 140)
	UIElements["Box"]["Delay"].Text = tostring(Options.Tempo)
	UIElements["Box"]["Delay"].Parent = UI.getUI()
end

for Name, Element in pairs(UIElements.Box) do
	task.spawn(Listen, Name, Element)
end

table.insert(Connections, UIElements.Circle.MouseButton1Click:Connect(function()
	if Toggled then
		Settings.Jump = false
		Toggled = false
		TweenService:Create(UIElements.Circle, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = UDim2.new(0.22, 0, 0.5, 0) }):Play()
		TweenService:Create(UIElements.Slide, TweenInfo.new(0.3), { BackgroundColor3 = Color3.fromRGB(20, 20, 20) }):Play()
	else
		Settings.Jump = true
		Toggled = true
		TweenService:Create(UIElements.Circle, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = UDim2.new(0.772, 0, 0.5, 0) }):Play()
		TweenService:Create(UIElements.Slide, TweenInfo.new(0.3), { BackgroundColor3 = Color3.fromRGB(37, 150, 255) }):Play()
	end
end))

table.insert(Connections, UIElements.Play.MouseButton1Up:Connect(function()
	if not Settings.Config.Start or not Settings.Config.End then return end
	if not Settings.Started then
		Settings.Started = true
		StartThread()
	else
		Settings.Started = false
		EndThread(false)
	end
end))

if Notification then
	Notification:SetupJJs()
end

Request:Post("https://scripts-zvyz.glitch.me/api/count")
